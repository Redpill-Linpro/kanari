name: CI
on:
  push:
    branches: [main, ci]
  pull_request:
    branches: [main, ci]
env:
  NO_COLOR: "1"
  PYTHONPYCACHEPREFIX: "/home/runner/.cache/python"
  PYTHONUTF8: "1"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmariadb-dev libpq-dev curl
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check Python compilation
        run: |
          find . -name "*.py" -type f -exec python -m py_compile {} +
        continue-on-error: true
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if PGPASSWORD=testpass pg_isready -h localhost -U testuser -d testdb; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
      - name: Set up test database schema
        run: |
          PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "CREATE TABLE IF NOT EXISTS kanari (id SERIAL PRIMARY KEY, data TEXT);"
          PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "INSERT INTO kanari (data) VALUES ('test data') ON CONFLICT DO NOTHING;"
      - name: Verify PostgreSQL connection
        run: |
          PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "SELECT COUNT(*) FROM kanari;" || exit 1
      - name: Run Flask app in background (no services configured)
        run: |
          python -m flask --app wsgi.py run --port=5000 &
          echo $! > flask.pid
          sleep 5
      - name: Test app works without services configured
        run: |
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 4 http://127.0.0.1:5000/)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Expected 200 (no services configured), got $STATUS_CODE"
            exit 1
          fi
      - name: Stop Flask app
        run: |
          if [ -f flask.pid ]; then
            kill "$(cat flask.pid)" || true
            sleep 2
          fi
      - name: Test PostgreSQL works initially
        env:
          PG_HOST: "localhost"
          PG_PORT: "5432"
          PG_DATABASE: "testdb"
          PG_USER: "testuser"
          PG_PASSWORD: "testpass"
        run: |
          python -m flask --app wsgi.py run --port=5004 &
          echo $! > flask_pg_working.pid
          sleep 8
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 http://127.0.0.1:5004/)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Expected 200 (PostgreSQL working), got $STATUS_CODE"
            curl -s http://127.0.0.1:5004/ || true
            exit 1
          fi
          echo "✓ PostgreSQL connection working initially"
          if [ -f flask_pg_working.pid ]; then
            kill "$(cat flask_pg_working.pid)" || true
            sleep 2
          fi
      - name: Stop PostgreSQL service
        run: |
          docker stop $(docker ps -q --filter "ancestor=postgres:16") || true
          sleep 5
      - name: Test PostgreSQL failure returns 504
        env:
          PG_HOST: "localhost"
          PG_PORT: "5432"
          PG_DATABASE: "testdb"
          PG_USER: "testuser"
          PG_PASSWORD: "testpass"
        run: |
          python -m flask --app wsgi.py run --port=5005 &
          echo $! > flask_pg_stopped.pid
          sleep 5
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://127.0.0.1:5005/)
          if [ "$STATUS_CODE" -ne 504 ]; then
            echo "Expected 504 (PostgreSQL stopped), got $STATUS_CODE"
            exit 1
          fi
          echo "✓ PostgreSQL failure correctly returns 504"
          if [ -f flask_pg_stopped.pid ]; then
            kill "$(cat flask_pg_stopped.pid)" || true
            sleep 2
          fi
      - name: Test MySQL timeout returns 504
        env:
          DB_HOST: "10.255.255.1"
          DB_PORT: "3306"
          DB_NAME: "test"
          DB_USER: "test"
          DB_PASSWORD: "test"
        run: |
          python -m flask --app wsgi.py run --port=5001 &
          echo $! > flask_mysql_timeout.pid
          sleep 5
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://127.0.0.1:5001/)
          if [ "$STATUS_CODE" -ne 504 ]; then
            echo "Expected 504 (MySQL timeout), got $STATUS_CODE"
            exit 1
          fi
          if [ -f flask_mysql_timeout.pid ]; then
            kill "$(cat flask_mysql_timeout.pid)" || true
            sleep 2
          fi
      - name: Test PostgreSQL timeout returns 504
        env:
          PG_HOST: "10.255.255.2"
          PG_PORT: "5432"
          PG_DATABASE: "test"
          PG_USER: "test"
          PG_PASSWORD: "test"
        run: |
          python -m flask --app wsgi.py run --port=5002 &
          echo $! > flask_pg_timeout.pid
          sleep 5
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://127.0.0.1:5002/)
          if [ "$STATUS_CODE" -ne 504 ]; then
            echo "Expected 504 (PostgreSQL timeout), got $STATUS_CODE"
            exit 1
          fi
          if [ -f flask_pg_timeout.pid ]; then
            kill "$(cat flask_pg_timeout.pid)" || true
            sleep 2
          fi
      - name: Test S3 timeout returns 504
        env:
          S3_ACCESS_KEY: "test_key"
          S3_SECRET_KEY: "test_secret"
          S3_ENDPOINT: "http://10.255.255.3:9000"
          S3_BUCKET: "test-bucket"
        run: |
          python -m flask --app wsgi.py run --port=5003 &
          echo $! > flask_s3_timeout.pid
          sleep 5
          set -e
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://127.0.0.1:5003/)
          if [ "$STATUS_CODE" -ne 504 ]; then
            echo "Expected 504 (S3 timeout), got $STATUS_CODE"
            exit 1
          fi
          if [ -f flask_s3_timeout.pid ]; then
            kill "$(cat flask_s3_timeout.pid)" || true
          fi
